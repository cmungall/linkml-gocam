interface ActivityOrProcess
  {
    id: String!
  }

type AnatomicalEntity implements Continuant
  {
    id: String!
    type: OntologyClass!
    typeInferences: [OntologyClass]
    partOf: AnatomicalPartOfAssociation
    category: AnatomicalEntityCategory!
  }

type AnatomicalPartOfAssociation
  {
    hasEvidence: Evidence
    subject: DomainElement
    predicate: PredicateType
    object: AnatomicalEntity!
  }

interface Association
  {
    hasEvidence: Evidence
    subject: DomainElement
    predicate: PredicateType
    object: Element!
  }

type BiologicalProcess implements ActivityOrProcess, ProcessOrPhase
  {
    id: String!
    type: OntologyClass!
    typeInferences: [OntologyClass]
    occursIn: OccursInAssociation
    causes: CausesAssociation
    happensDuring: HappensDuringAssociation
  }

type CausesAssociation
  {
    hasEvidence: Evidence
    subject: DomainElement
    object: ActivityOrProcess!
    predicate: PredicateType
  }

type ChemicalEntity
  {
    id: String!
    type: OntologyClass!
    typeInferences: [OntologyClass]
  }

interface Continuant
  {
    id: String!
  }

type DomainElement
  {
    id: String!
    type: OntologyClass!
    typeInferences: [OntologyClass]
  }

interface DomainElementMixin
  {
    id: String!
  }

type Element
  {
    id: String!
  }

type EnabledByAssociation
  {
    hasEvidence: Evidence
    subject: DomainElement
    predicate: PredicateType
    object: InformationBiomacromolecule!
  }

type Evidence
  {
    id: String!
    contributor: [String]
    date: String
    evidenceType: OntologyClass!
    reference: [Publication]
    withObject: [Element]
  }

type HappensDuringAssociation
  {
    hasEvidence: Evidence
    subject: DomainElement
    predicate: PredicateType
    object: ActivityOrProcess!
  }

type HasInputAssociation
  {
    hasEvidence: Evidence
    subject: DomainElement
    predicate: PredicateType
    object: Continuant!
  }

interface HasPartAssociation
  {
    hasEvidence: Evidence
    subject: DomainElement
    predicate: PredicateType
    object: Element!
  }

type InformationBiomacromolecule implements Continuant
  {
    id: String!
    type: OntologyClass!
    typeInferences: [OntologyClass]
    hasPart: MacromoleculeHasPartAssociation
    category: InformationBiomacromoleculeCategory!
  }

interface InformationElement
  {
    id: String!
  }

type MacromoleculeHasPartAssociation
  {
    hasEvidence: Evidence
    subject: DomainElement
    predicate: PredicateType
    object: Continuant!
  }

type Model
  {
    id: String!
    title: String
    contributor: [String]
    date: String
    state: ModelStateEnum
    providedBy: String
    molecularActivitySet: [MolecularActivity]
    biologicalProcessSet: [BiologicalProcess]
    informationBiomacromoleculeSet: [InformationBiomacromolecule]
    chemicalEntitySet: [ChemicalEntity]
    ontologyClassSet: [OntologyClass]
  }

type MolecularActivity implements ActivityOrProcess
  {
    id: String!
    type: OntologyClass!
    typeInferences: [OntologyClass]
    causes: CausesAssociation
    happensDuring: HappensDuringAssociation
    partOf: ProcessPartOfAssociation
    enabledBy: EnabledByAssociation
    hasInput: HasInputAssociation
    occursIn: OccursInAssociation
  }

type OccursInAssociation
  {
    hasEvidence: Evidence
    subject: DomainElement
    predicate: PredicateType
    object: AnatomicalEntity!
  }

type OntologyClass
  {
    id: String!
    name: LabelType
    category: CategoryType!
  }

interface PartOfAssociation
  {
    hasEvidence: Evidence
    subject: DomainElement
    predicate: PredicateType
    object: Element!
  }

interface ProcessOrPhase
  {
    id: String!
  }

type ProcessPartOfAssociation
  {
    hasEvidence: Evidence
    subject: DomainElement
    predicate: PredicateType
    object: ActivityOrProcess!
  }

type Publication
  {
    id: String!
  }


